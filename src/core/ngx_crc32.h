begin_unit|revision:1.0.0;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) Igor Sysoev  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_NGX_CRC32_H_INCLUDED_
end_ifndef

begin_define
DECL|macro|_NGX_CRC32_H_INCLUDED_
define|#
directive|define
name|_NGX_CRC32_H_INCLUDED_
end_define

begin_include
include|#
directive|include
file|<ngx_config.h>
end_include

begin_include
include|#
directive|include
file|<ngx_core.h>
end_include

begin_decl_stmt
specifier|extern
name|uint32_t
modifier|*
name|ngx_crc32_table_short
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|uint32_t
name|ngx_crc32_table256
index|[]
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|ngx_inline
name|uint32_t
DECL|function|ngx_crc32_short (u_char * p,size_t len)
name|ngx_crc32_short
parameter_list|(
name|u_char
modifier|*
name|p
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
name|u_char
name|c
decl_stmt|;
name|uint32_t
name|crc
decl_stmt|;
name|crc
operator|=
literal|0xffffffff
expr_stmt|;
while|while
condition|(
name|len
operator|--
condition|)
block|{
name|c
operator|=
operator|*
name|p
operator|++
expr_stmt|;
name|crc
operator|=
name|ngx_crc32_table_short
index|[
operator|(
name|crc
operator|^
operator|(
name|c
operator|&
literal|0xf
operator|)
operator|)
operator|&
literal|0xf
index|]
operator|^
operator|(
name|crc
operator|>>
literal|4
operator|)
expr_stmt|;
name|crc
operator|=
name|ngx_crc32_table_short
index|[
operator|(
name|crc
operator|^
operator|(
name|c
operator|>>
literal|4
operator|)
operator|)
operator|&
literal|0xf
index|]
operator|^
operator|(
name|crc
operator|>>
literal|4
operator|)
expr_stmt|;
block|}
return|return
name|crc
operator|^
literal|0xffffffff
return|;
block|}
end_function

begin_function
specifier|static
name|ngx_inline
name|uint32_t
DECL|function|ngx_crc32_long (u_char * p,size_t len)
name|ngx_crc32_long
parameter_list|(
name|u_char
modifier|*
name|p
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
name|uint32_t
name|crc
decl_stmt|;
name|crc
operator|=
literal|0xffffffff
expr_stmt|;
while|while
condition|(
name|len
operator|--
condition|)
block|{
name|crc
operator|=
name|ngx_crc32_table256
index|[
operator|(
name|crc
operator|^
operator|*
name|p
operator|++
operator|)
operator|&
literal|0xff
index|]
operator|^
operator|(
name|crc
operator|>>
literal|8
operator|)
expr_stmt|;
block|}
return|return
name|crc
operator|^
literal|0xffffffff
return|;
block|}
end_function

begin_define
DECL|macro|ngx_crc32_init (crc)
define|#
directive|define
name|ngx_crc32_init
parameter_list|(
name|crc
parameter_list|)
define|\
value|crc = 0xffffffff
end_define

begin_function
specifier|static
name|ngx_inline
name|void
DECL|function|ngx_crc32_update (uint32_t * crc,u_char * p,size_t len)
name|ngx_crc32_update
parameter_list|(
name|uint32_t
modifier|*
name|crc
parameter_list|,
name|u_char
modifier|*
name|p
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
name|uint32_t
name|c
decl_stmt|;
name|c
operator|=
operator|*
name|crc
expr_stmt|;
while|while
condition|(
name|len
operator|--
condition|)
block|{
name|c
operator|=
name|ngx_crc32_table256
index|[
operator|(
name|c
operator|^
operator|*
name|p
operator|++
operator|)
operator|&
literal|0xff
index|]
operator|^
operator|(
name|c
operator|>>
literal|8
operator|)
expr_stmt|;
block|}
operator|*
name|crc
operator|=
name|c
expr_stmt|;
block|}
end_function

begin_define
DECL|macro|ngx_crc32_final (crc)
define|#
directive|define
name|ngx_crc32_final
parameter_list|(
name|crc
parameter_list|)
define|\
value|crc ^= 0xffffffff
end_define

begin_function_decl
name|ngx_int_t
name|ngx_crc32_table_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _NGX_CRC32_H_INCLUDED_ */
end_comment

end_unit

