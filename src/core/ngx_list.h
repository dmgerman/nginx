begin_unit|revision:1.0.0;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|_NGX_LIST_H_INCLUDED_
end_ifndef

begin_define
DECL|macro|_NGX_LIST_H_INCLUDED_
define|#
directive|define
name|_NGX_LIST_H_INCLUDED_
end_define

begin_include
include|#
directive|include
file|<ngx_config.h>
end_include

begin_include
include|#
directive|include
file|<ngx_core.h>
end_include

begin_typedef
DECL|typedef|ngx_list_part_t
typedef|typedef
name|struct
name|ngx_list_part_s
name|ngx_list_part_t
typedef|;
end_typedef

begin_struct
DECL|struct|ngx_list_part_s
struct|struct
name|ngx_list_part_s
block|{
DECL|member|elts
name|void
modifier|*
name|elts
decl_stmt|;
DECL|member|nelts
name|ngx_uint_t
name|nelts
decl_stmt|;
DECL|member|next
name|ngx_list_part_t
modifier|*
name|next
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
DECL|struct|__anon2b424bc20108
typedef|typedef
struct|struct
block|{
DECL|member|last
name|ngx_list_part_t
modifier|*
name|last
decl_stmt|;
DECL|member|part
name|ngx_list_part_t
name|part
decl_stmt|;
DECL|member|size
name|size_t
name|size
decl_stmt|;
DECL|member|nalloc
name|ngx_uint_t
name|nalloc
decl_stmt|;
DECL|member|pool
name|ngx_pool_t
modifier|*
name|pool
decl_stmt|;
DECL|typedef|ngx_list_t
block|}
name|ngx_list_t
typedef|;
end_typedef

begin_function
DECL|function|ngx_list_init (ngx_list_t * list,ngx_pool_t * pool,ngx_uint_t n,size_t size)
name|ngx_inline
specifier|static
name|ngx_int_t
name|ngx_list_init
parameter_list|(
name|ngx_list_t
modifier|*
name|list
parameter_list|,
name|ngx_pool_t
modifier|*
name|pool
parameter_list|,
name|ngx_uint_t
name|n
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|list
operator|->
name|part
operator|.
name|elts
operator|=
name|ngx_palloc
argument_list|(
name|pool
argument_list|,
name|n
operator|*
name|size
argument_list|)
operator|)
condition|)
block|{
return|return
name|NGX_ERROR
return|;
block|}
name|list
operator|->
name|part
operator|.
name|nelts
operator|=
literal|0
expr_stmt|;
name|list
operator|->
name|part
operator|.
name|next
operator|=
name|NULL
expr_stmt|;
name|list
operator|->
name|last
operator|=
operator|&
name|list
operator|->
name|part
expr_stmt|;
name|list
operator|->
name|size
operator|=
name|size
expr_stmt|;
name|list
operator|->
name|nalloc
operator|=
name|n
expr_stmt|;
name|list
operator|->
name|pool
operator|=
name|pool
expr_stmt|;
return|return
name|NGX_OK
return|;
block|}
end_function

begin_comment
comment|/*  *  *  the iteration through the list:  *  *  part =&list.part;  *  data = part->elts;  *  *  for (i = 0 ;; i++) {  *  *      if (i>= part->nelts) {  *          if (part->next == NULL) {  *              break;  *          }  *  *          part = part->next;  *          data = part->elts;  *          i = 0;  *      }  *  *      ...  data[i] ...  *  *  }  */
end_comment

begin_function_decl
name|void
modifier|*
name|ngx_list_push
parameter_list|(
name|ngx_list_t
modifier|*
name|list
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _NGX_LIST_H_INCLUDED_ */
end_comment

end_unit

