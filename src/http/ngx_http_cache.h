begin_unit|revision:1.0.0;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) Igor Sysoev  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_NGX_HTTP_CACHE_H_INCLUDED_
end_ifndef

begin_define
DECL|macro|_NGX_HTTP_CACHE_H_INCLUDED_
define|#
directive|define
name|_NGX_HTTP_CACHE_H_INCLUDED_
end_define

begin_include
include|#
directive|include
file|<ngx_config.h>
end_include

begin_include
include|#
directive|include
file|<ngx_core.h>
end_include

begin_include
include|#
directive|include
file|<ngx_http.h>
end_include

begin_comment
comment|/*  * The 3 bits allows the 7 uses before the cache entry allocation.  * We can use maximum 7 bits, i.e up to the 127 uses.  */
end_comment

begin_define
DECL|macro|NGX_HTTP_CACHE_LAZY_ALLOCATION_BITS
define|#
directive|define
name|NGX_HTTP_CACHE_LAZY_ALLOCATION_BITS
value|3
end_define

begin_typedef
DECL|struct|__anon28b02e9f0108
typedef|typedef
struct|struct
block|{
DECL|member|crc
name|uint32_t
name|crc
decl_stmt|;
DECL|member|key
name|ngx_str_t
name|key
decl_stmt|;
DECL|member|accessed
name|time_t
name|accessed
decl_stmt|;
DECL|member|refs
name|unsigned
name|refs
range|:
literal|20
decl_stmt|;
comment|/* 1048576 references */
DECL|member|count
name|unsigned
name|count
range|:
name|NGX_HTTP_CACHE_LAZY_ALLOCATION_BITS
decl_stmt|;
DECL|member|deleted
name|unsigned
name|deleted
range|:
literal|1
decl_stmt|;
DECL|member|expired
name|unsigned
name|expired
range|:
literal|1
decl_stmt|;
DECL|member|memory
name|unsigned
name|memory
range|:
literal|1
decl_stmt|;
DECL|member|mmap
name|unsigned
name|mmap
range|:
literal|1
decl_stmt|;
DECL|member|notify
name|unsigned
name|notify
range|:
literal|1
decl_stmt|;
DECL|member|fd
name|ngx_fd_t
name|fd
decl_stmt|;
if|#
directive|if
operator|(
name|NGX_USE_HTTP_FILE_CACHE_UNIQ
operator|)
DECL|member|uniq
name|ngx_file_uniq_t
name|uniq
decl_stmt|;
comment|/* no needed with kqueue */
endif|#
directive|endif
DECL|member|last_modified
name|time_t
name|last_modified
decl_stmt|;
DECL|member|updated
name|time_t
name|updated
decl_stmt|;
DECL|union|__anon28b02e9f020a
union|union
block|{
DECL|member|size
name|off_t
name|size
decl_stmt|;
DECL|member|value
name|ngx_str_t
name|value
decl_stmt|;
DECL|member|data
block|}
name|data
union|;
DECL|typedef|ngx_http_cache_entry_t
block|}
name|ngx_http_cache_entry_t
typedef|;
end_typedef

begin_typedef
DECL|struct|__anon28b02e9f0308
typedef|typedef
struct|struct
block|{
DECL|member|expires
name|time_t
name|expires
decl_stmt|;
DECL|member|last_modified
name|time_t
name|last_modified
decl_stmt|;
DECL|member|date
name|time_t
name|date
decl_stmt|;
DECL|member|length
name|off_t
name|length
decl_stmt|;
DECL|member|key_len
name|size_t
name|key_len
decl_stmt|;
DECL|member|key
name|char
name|key
index|[
literal|1
index|]
decl_stmt|;
DECL|typedef|ngx_http_cache_header_t
block|}
name|ngx_http_cache_header_t
typedef|;
end_typedef

begin_define
DECL|macro|NGX_HTTP_CACHE_HASH
define|#
directive|define
name|NGX_HTTP_CACHE_HASH
value|7
end_define

begin_define
DECL|macro|NGX_HTTP_CACHE_NELTS
define|#
directive|define
name|NGX_HTTP_CACHE_NELTS
value|4
end_define

begin_typedef
DECL|struct|__anon28b02e9f0408
typedef|typedef
struct|struct
block|{
DECL|member|elts
name|ngx_http_cache_entry_t
modifier|*
name|elts
decl_stmt|;
DECL|member|hash
name|size_t
name|hash
decl_stmt|;
DECL|member|nelts
name|size_t
name|nelts
decl_stmt|;
DECL|member|life
name|time_t
name|life
decl_stmt|;
DECL|member|update
name|time_t
name|update
decl_stmt|;
if|#
directive|if
operator|(
name|NGX_THREADS
operator|)
DECL|member|mutex
name|ngx_mutex_t
name|mutex
decl_stmt|;
endif|#
directive|endif
DECL|member|pool
name|ngx_pool_t
modifier|*
name|pool
decl_stmt|;
DECL|typedef|ngx_http_cache_hash_t
block|}
name|ngx_http_cache_hash_t
typedef|;
end_typedef

begin_typedef
DECL|struct|__anon28b02e9f0508
typedef|typedef
struct|struct
block|{
DECL|member|hash
name|ngx_http_cache_hash_t
modifier|*
name|hash
decl_stmt|;
DECL|member|cache
name|ngx_http_cache_entry_t
modifier|*
name|cache
decl_stmt|;
DECL|member|file
name|ngx_file_t
name|file
decl_stmt|;
DECL|member|key
name|ngx_array_t
name|key
decl_stmt|;
DECL|member|crc
name|uint32_t
name|crc
decl_stmt|;
DECL|member|md5
name|u_char
name|md5
index|[
literal|16
index|]
decl_stmt|;
DECL|member|path
name|ngx_path_t
modifier|*
name|path
decl_stmt|;
DECL|member|buf
name|ngx_buf_t
modifier|*
name|buf
decl_stmt|;
DECL|member|expires
name|time_t
name|expires
decl_stmt|;
DECL|member|last_modified
name|time_t
name|last_modified
decl_stmt|;
DECL|member|date
name|time_t
name|date
decl_stmt|;
DECL|member|length
name|off_t
name|length
decl_stmt|;
DECL|member|key_len
name|size_t
name|key_len
decl_stmt|;
DECL|member|file_start
name|size_t
name|file_start
decl_stmt|;
DECL|member|uniq
name|ngx_file_uniq_t
name|uniq
decl_stmt|;
DECL|member|log
name|ngx_log_t
modifier|*
name|log
decl_stmt|;
comment|/* STUB */
DECL|member|header_size
name|ssize_t
name|header_size
decl_stmt|;
DECL|member|key0
name|ngx_str_t
name|key0
decl_stmt|;
DECL|typedef|ngx_http_cache_t
block|}
name|ngx_http_cache_t
typedef|;
end_typedef

begin_typedef
DECL|struct|__anon28b02e9f0608
typedef|typedef
struct|struct
block|{
DECL|member|path
name|ngx_path_t
modifier|*
name|path
decl_stmt|;
DECL|member|key
name|ngx_str_t
name|key
decl_stmt|;
DECL|member|buf
name|ngx_buf_t
modifier|*
name|buf
decl_stmt|;
DECL|member|file
name|unsigned
name|file
range|:
literal|1
decl_stmt|;
DECL|member|memory
name|unsigned
name|memory
range|:
literal|1
decl_stmt|;
DECL|member|primary
name|unsigned
name|primary
range|:
literal|1
decl_stmt|;
DECL|typedef|ngx_http_cache_ctx_t
block|}
name|ngx_http_cache_ctx_t
typedef|;
end_typedef

begin_define
DECL|macro|NGX_HTTP_CACHE_STALE
define|#
directive|define
name|NGX_HTTP_CACHE_STALE
value|1
end_define

begin_define
DECL|macro|NGX_HTTP_CACHE_AGED
define|#
directive|define
name|NGX_HTTP_CACHE_AGED
value|2
end_define

begin_define
DECL|macro|NGX_HTTP_CACHE_THE_SAME
define|#
directive|define
name|NGX_HTTP_CACHE_THE_SAME
value|3
end_define

begin_function_decl
name|ngx_int_t
name|ngx_http_cache_get
parameter_list|(
name|ngx_http_request_t
modifier|*
name|r
parameter_list|,
name|ngx_http_cache_ctx_t
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ngx_int_t
name|ngx_http_file_cache_get
parameter_list|(
name|ngx_http_request_t
modifier|*
name|r
parameter_list|,
name|ngx_http_cache_ctx_t
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ngx_int_t
name|ngx_http_file_cache_open
parameter_list|(
name|ngx_http_cache_t
modifier|*
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ngx_int_t
name|ngx_http_cache_cleaner_handler
parameter_list|(
name|ngx_gc_t
modifier|*
name|gc
parameter_list|,
name|ngx_str_t
modifier|*
name|name
parameter_list|,
name|ngx_dir_t
modifier|*
name|dir
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
literal|0
end_if

begin_endif
unit|ngx_http_cache_t *ngx_http_cache_get(ngx_http_cache_hash_t *cache,                                      ngx_http_cleanup_t *cleanup,                                      ngx_str_t *key, uint32_t *crc);  ngx_http_cache_t *ngx_http_cache_alloc(ngx_http_cache_hash_t *hash,                                        ngx_http_cache_t *cache,                                        ngx_http_cleanup_t *cleanup,                                        ngx_str_t *key, uint32_t crc,                                        ngx_str_t *value, ngx_log_t *log); void ngx_http_cache_free(ngx_http_cache_t *cache,                          ngx_str_t *key, ngx_str_t *value, ngx_log_t *log); void ngx_http_cache_lock(ngx_http_cache_hash_t *hash, ngx_http_cache_t *cache); void ngx_http_cache_unlock(ngx_http_cache_hash_t *hash,                            ngx_http_cache_t *cache, ngx_log_t *log);  int ngx_http_cache_update_file(ngx_http_request_t *r,ngx_http_cache_ctx_t *ctx,                                ngx_str_t *temp_file);  int ngx_http_send_cached(ngx_http_request_t *r);   char *ngx_http_set_cache_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _NGX_HTTP_CACHE_H_INCLUDED_ */
end_comment

end_unit

